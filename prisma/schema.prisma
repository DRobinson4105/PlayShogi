// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  image          String?   @default("https://wallpapers-clan.com/wp-content/uploads/2022/08/default-pfp-1.jpg")
  email          String?   @unique
  emailVerified  DateTime?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  sessions       Session[]
  accounts       Account[]

  // Friends
  friendshipsAsUser   Friendship[] @relation("UserFriendshipsAsUser")
  friendshipsAsFriend Friendship[] @relation("UserFriendshipsAsFriend")

  // Stats
  rank   Int @default(0)
  wins   Int @default(0)
  losses Int @default(0)
  draws  Int @default(0)
}

model Friendship {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  user     User   @relation(name: "UserFriendshipsAsUser", fields: [userId], references: [id])
  userId   String @map("_userId") @db.ObjectId
  friend   User   @relation(name: "UserFriendshipsAsFriend", fields: [friendId], references: [id])
  friendId String @map("_friendId") @db.ObjectId

  @@unique([userId, friendId])
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
